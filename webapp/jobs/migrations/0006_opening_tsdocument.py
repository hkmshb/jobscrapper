# Generated by Django 3.0.8 on 2020-08-18 10:42

import django.contrib.postgres.search
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('jobs', '0005_auto_20200818_1751'),
    ]

    operations = [
        migrations.AddField(
            model_name='opening',
            name='tsdocument',
            field=django.contrib.postgres.search.SearchVectorField(default='', verbose_name='Document'),
            preserve_default=False,
        ),
        migrations.RunSQL("""
            -- create GIN (Generalized Inverted Index) index on the tsdocument
            CREATE INDEX gidx_tsdocument ON jobs_opening
            USING GIN(tsdocument);

            -- create function to automatically update/populate the tsdocument field
            CREATE OR REPLACE FUNCTION jobs_opening_tsvector_trigger() RETURNS trigger AS $$
            DECLARE
                counter             INTEGER;
                company_name        VARCHAR(100);
                company_industry    VARCHAR(100);
                location_names      VARCHAR(100) ARRAY[20];
            BEGIN

                -- select company name from company id
                SELECT name, industry INTO company_name, company_industry
                FROM jobs_company
                WHERE id = NEW.company_id;

                -- select location names for opening
                SELECT ARRAY(
                    SELECT l.name
                    FROM jobs_location l
                    JOIN jobs_opening_locations ol
                        ON (l.id = ol.location_id)
                    WHERE ol.opening_id = NEW.id
                ) INTO location_names;

                -- prepare concatenated data to be stored in tsdocument
                NEW.tsdocument :=
                    to_tsvector('english', COALESCE(NEW.role_title, '')) ||
                    to_tsvector('english', COALESCE(NEW.description,'')) ||
                    to_tsvector('english', COALESCE(company_name, '')) ||
                    to_tsvector('english', COALESCE(company_industry, '')) ||
                    to_tsvector('english', COALESCE(ARRAY_TO_STRING(location_names, '; '), '')) ||
                    to_tsvector('english', CASE NEW.is_remote WHEN 'true' THEN 'Remote' ELSE '' END) ||
                    to_tsvector('english', CASE NEW.part_time_permitted WHEN 'true' THEN 'Part-Time' ELSE '' END) ||
                    to_tsvector('english', CASE NEW.has_401k WHEN 'true' THEN '401K' ELSE '' END) ||
                    to_tsvector('english', CASE NEW.has_dentalins WHEN 'true' THEN 'Dental Insurance' ELSE '' END) ||
                    to_tsvector('english', CASE NEW.has_healthins WHEN 'true' THEN 'Health Insurance' ELSE '' END);

                return NEW;
            END
            $$ LANGUAGE plpgsql;

            -- create trigger which executes function defined above after inserts or updates to jobs_opening table
            CREATE TRIGGER jobs_opening_tsvector_update
            BEFORE INSERT OR UPDATE ON jobs_opening
            FOR EACH ROW EXECUTE PROCEDURE jobs_opening_tsvector_trigger();
        """)
    ]
